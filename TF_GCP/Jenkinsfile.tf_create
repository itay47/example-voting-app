library identifier: 'example-voting-app@master', retriever: modernSCM(
        [$class: 'GitSCMSource', remote: 'https://github.com/itay47/example-voting-app.git'])

pipeline {
  agent any

  environment {
    TF_IN_AUTOMATION = 'true'
    CLOUDSDK_CONFIG = "${env.WORKSPACE}"
    GOOGLE_APPLICATION_CREDENTIALS = credentials('gCloud_ServiceAccount')
    NEXUS_CREDS = credentials('nexus-creds')
    ARTIFACTORY_USERNAME = "$env.NEXUS_CREDS_USR"
    ARTIFACTORY_PASSWORD = "$env.NEXUS_CREDS_PSW"
  }
  
  stages {

    stage ('Git Checkout') {
      steps {
        git "https://github.com/itay47/example-voting-app.git"
      }
    }
    
    stage('Terraform Init') {
      steps {
        dir('TF_GCP/Provision_GKE') {
          withCredentials([usernamePassword(credentialsId: 'nexus-creds', passwordVariable: 'nexus_pass', usernameVariable: 'nexus_user')]) {
            sh("gcloud auth activate-service-account  --key-file=${env.GOOGLE_APPLICATION_CREDENTIALS}")
            sh ("terraform init -input=false -reconfigure")
          }
        }
      }
    }
    
    stage('Terraform Plan') {
      steps {
          dir('TF_GCP/Provision_GKE') {
            sh("gcloud auth activate-service-account  --key-file=${env.GOOGLE_APPLICATION_CREDENTIALS}")
            sh ("terraform plan -out=tfplan -input=false -var-file=terraform.tfvars")
          }
        }

      post{
          success{
              script{
                Telegram.sendTextTelegram("Terraform Plan completed\nConfim Apply")
              }
          }
          failure{
              script{
                Telegram.sendTextTelegram("Terraform Plan failed")
              }
          }
      }
    }
    
    stage('Terraform Apply') {
      input {
        message "Deploy to GCP and create the GKE cluster?"
      }

      steps {
          dir('TF_GCP/Provision_GKE') {
            withCredentials([usernamePassword(credentialsId: 'nexus-creds', passwordVariable: 'nexus_pass', usernameVariable: 'nexus_user')]) {
              sh("gcloud auth activate-service-account  --key-file=${env.GOOGLE_APPLICATION_CREDENTIALS}")
              sh ("terraform apply -input=false tfplan")
            }
          }
      }
      
      post{         
          success{
              echo "====++++ Provision success ++++===="
              script{
                Telegram.sendTextTelegram("Provision of GKE cluster success")
              }
          }
          
          failure{
              echo "====++++ Provision failed ++++===="
              script{
                Telegram.sendTextTelegram("Provision of GKE cluster failed")
              }
          }
      }
    }

    stage('Get TF output') {

      steps {
          dir('TF_GCP/Provision_GKE') {
            withCredentials([usernamePassword(credentialsId: 'nexus-creds', passwordVariable: 'nexus_pass', usernameVariable: 'nexus_user')]) {
              sh("gcloud auth activate-service-account  --key-file=${env.GOOGLE_APPLICATION_CREDENTIALS}")
              script{
                    def tfoutput = sh(script:"terraform output -json",returnStdout: true).trim()
                    //echo "${tfoutput}"
                    def jsonobj = readJSON text: "${tfoutput}"
                    
                    echo "GKE cluster name: ${jsonobj.kubernetes_cluster_name.value}"
                    echo "GKE cluster IP: ${jsonobj.kubernetes_cluster_host.value}"
                    echo "Proj ID: ${jsonobj.project_id.value}"
                    echo "region: ${jsonobj.region.value}"
                    echo "vpc: ${jsonobj.vpc.value}"

                    Telegram.sendTextTelegram("GKE cluster name: ${jsonobj.kubernetes_cluster_name.value}")
                    Telegram.sendTextTelegram("GKE cluster IP: ${jsonobj.kubernetes_cluster_host.value}")
                    Telegram.sendTextTelegram("Proj ID: ${jsonobj.project_id.value}")
                    Telegram.sendTextTelegram("region: ${jsonobj.region.value}")
                    Telegram.sendTextTelegram("vpc: ${jsonobj.vpc.value}")

                    //notify once the cluster is up
                    while( true ) {
                      //get cluster status in json format
                      def gke_status = sh(script:"gcloud container clusters list --project ${jsonobj.project_id.value} --format json",returnStdout: true).trim()
                      gke_status = (gke_status.substring(1, gke_status.length() - 1)).trim()
                      writeFile(file: 'gke_status.json', text: gke_status)
                      def __obj = readJSON text: "${gke_status}"
                      //echo "${__obj.status}"

                      if( __obj.status == "RUNNING" ) {break}
                      else {
                        echo "still running..."
                        Telegram.sendTextTelegram("GKE cluster status: ${jsonobj.vpc.value}")
                        sleep(time:2,unit:"MINUTES")
                      }
                    }
              }
            }
          }
      }
    }
  }
}