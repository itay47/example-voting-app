library identifier: 'example-voting-app@master', retriever: modernSCM(
        [$class: 'GitSCMSource', remote: 'https://github.com/itay47/example-voting-app.git'])

//Create the kubernetes namespace
def createNamespace (namespace) {
    echo "Creating namespace ${namespace} if needed"

    sh "[ ! -z \"\$(kubectl get ns ${namespace} -o name 2>/dev/null)\" ] || kubectl create ns ${namespace}"
}

def set_build_number_from_date () {
    def now = new Date()
    now.format("dd.MM.yy.HHmm", TimeZone.getTimeZone('UTC+3'))
    return "1.${now}"
}

//this function will update the values.yaml given element.path.name with the new value and file path  
//REQUIRES yq to be pre-installed!
// get at: https://github.com/mikefarah/yq
// usage: https://mikefarah.gitbook.io/yq/commands/evaluate
def update_values_yaml (element_path,new_val,ymal_file_path,filename) {
    sh "yq eval '.${element_path} = \"${new_val}\"' -i ${ymal_file_path}/${filename}"
}

pipeline {
    agent any

    environment {
        CLOUDSDK_CONFIG = "${env.WORKSPACE}"
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gCloud_ServiceAccount')
        NEXUS_CREDS = credentials('nexus-creds')
        ARTIFACTORY_USERNAME = "$env.NEXUS_CREDS_USR"
        ARTIFACTORY_PASSWORD = "$env.NEXUS_CREDS_PSW"
        GIT_URL = "https://github.com/itay47/example-voting-app.git"
    }
  
    parameters {
        
        string(name: 'App_Version', defaultValue: set_build_number_from_date, description: 'The Helm chart name')
        string(name: 'HELM_CHART', defaultValue: 'voting-app', description: 'The Helm chart name')
        string(name: 'HELM_DIR_NAME', defaultValue: 'Helm/my-vote', description: 'The Helm directory name')
        string(name: 'VALUES_FILE', defaultValue: 'values.yaml', description: 'The Helm values file name')
        string(name: 'GKE_CLUSTER', defaultValue: 'devops-310517-gke', description: 'The GCP cluster name')
        string(name: 'GCP_PROJECT', defaultValue: 'devops-310517', description: 'The GCP project name')
        string(name: 'GCP_REGION', defaultValue: 'us-east1', description: 'The GCP region name')
        string(name: 'GCP_CLUSTER_VPC', defaultValue: 'final-project', description: 'The GCP VPC name')
        string(name: 'VOTE_PORT', defaultValue: '31000', description: 'The VOTE app port')
        string(name: 'RESULT_PORT', defaultValue: '31001', description: 'The RESULT app port')
    }

    stages {
        
        stage ('Git Checkout') {
            steps {
              git "$env.GIT_URL"
            }
        }

        stage('gcloud config') {
            steps {
                sh "gcloud container clusters get-credentials ${params.GKE_CLUSTER} --region ${params.GCP_REGION} --project ${params.GCP_PROJECT}"
            }
          }

        stage('update values.yaml') {
            steps {
                script{
                    //${element_path} ${new_val} ${ymal_file_path} ${filename}"
                    update_values_yaml("GLOBAL.app_version", "$params.App_Version", "$params.HELM_DIR_NAME", "$params.VALUES_FILE")
                    sh ("cat $params.HELM_DIR_NAME/$params.VALUES_FILE")

                    
                    Telegram.sendTextTelegram("Helm chart values.yaml\napp_version update: ${$params.App_Version}")
                }
            }
        }

        stage('push to repository') {
            steps{         
                sh "git commit -a -m update_build_number:${$params.App_Version}"         
                withCredentials([usernamePassword(credentialsId: 'github-creds', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {                        sh('git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/etzi71/voting-app.git HEAD:master'){
                    //sh("git push https://$GIT_USERNAME:$GIT_PASSWORD@github.com/etzi71/voting-app.git HEAD:master")
                    script{
                        try {
                            sh("git push https://$GIT_USERNAME:$GIT_PASSWORD@$env.GIT_URL HEAD:master")
                            Telegram.sendTextTelegram("git push ${params.VALUES_FILE}: ${$params.App_Version} -- Success!")
                        }
                        catch (err) {
                            Telegram.sendTextTelegram("git push ${params.VALUES_FILE}: ${$params.App_Version} -- Fail!")
                            throw
                        }
                    }
                }
            }
        }

        stage('Helm package and upload to nexus3 repo') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-creds', passwordVariable: 'NEXUS_CRED_PSW', usernameVariable: 'NEXUS_CRED_USR')]) {
                    script{
                        def HELM_PACK = ''
                        try{
                            //package the chart
                            sh ("helm package ${params.HELM_DIR_NAME}/${params.HELM_CHART}")
                            //grab the package name
                            HELM_PACK = sh(script:"ls my-vote*",returnStdout: true).trim()
                            //move it to the correct folder - ** package name must be same as in chart **
                            sh ("mv ${HELM_PACK} Helm/")
                            //connect and push to nexus3 helm-repo:
                            sh ("curl -u $NEXUS_CRED_USR:$NEXUS_CRED_PSW http://shechter47.mooo.com:8181/repository/helm-nexus/ --upload-file Helm/${HELM_PACK} -v")

                            Telegram.sendTextTelegram("Helm package: ${HELM_PACK} -- nexus3 upload Success!")

                            //remove local package for cleanup
                            sh ("rm Helm/${HELM_PACK}")
                        }
                        catch (err) {
                            echo err.getMessage()
                            Telegram.sendTextTelegram("Helm package: ${HELM_PACK} -- nexus3 upload Fail!")
                            Telegram.sendTextTelegram("err: ${err.getMessage()}")
                        }
                    }
                }
            }
        }  

        stage('Helm install voting-app from nexus3 repo') {

            input {
                message "Deploy to GKE?"
            }

            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-creds', passwordVariable: 'nexus_pass', usernameVariable: 'nexus_user')]) {
                    sh("gcloud auth activate-service-account  --key-file=${env.GOOGLE_APPLICATION_CREDENTIALS}")
                    script{
                        def HELM_PACK = ''
                        try{
                            //add and connect to a helm repo from artifactory:
                            //helm repo add <REPO_KEY> http://<ARTIFACTORY_HOST>:<ARTIFACTORY_PORT>/artifactory/<REPO_KEY> --username <USERNAME> --password <PASSWORD>
                            //helm repo update  <--- updates helm to use the newly added repo (acts like apt-get update)
                            sh ("helm repo add helm-nexus http://shechter47.mooo.com:8181/repository/helm-nexus/ --username $NEXUS_CRED_USR --password $NEXUS_CRED_PSW")
                            sh ("helm repo update")
                            HELM_PACK= sh(script:"helm search repo -l --output json",returnStdout: true).trim()
                            HELM_PACK = (HELM_PACK.substring(1, HELM_PACK.length() - 1)).trim() //remove leading and trailing '[' & ']'
                            def jsn = readJSON text: "${HELM_PACK}"
                            //"name":"helm-nexus/my-vote","version":"0.18.6.0","app_version":"1.18.6.0..."
                            def package_name = "${jsn.name}"
                            def package_version = "${jsn.version}"

                            //test it before deploy
                            sh ("helm upgrade --install --name ${params.HELM_CHART} helm-nexus/${package_name} --version ${package_version} --values ${params.HELM_DIR_NAME}/${params.VALUES_FILE} --dry-run")
                            
                            //deploy to GKE
                            sh ("helm upgrade --install --name ${params.HELM_CHART} helm-nexus/${package_name} --version ${package_version} --values ${params.HELM_DIR_NAME}/${params.VALUES_FILE}")
                        }
                        catch (err) {
                            echo err.getMessage()
                            Telegram.sendTextTelegram("Failed to install Helm package: ${HELM_PACK}")
                            Telegram.sendTextTelegram("err: ${err.getMessage()}")
                        }
                    }
                }
            }
        }

        stage('gcloud create firewall-rules') {
            steps {
                sh "gcloud compute firewall-rules create node-port-${params.VOTE_PORT} --network ${params.GCP_CLUSTER_VPC} --allow tcp:${params.VOTE_PORT}"
                sh "gcloud compute firewall-rules create node-port-${params.RESULT_PORT} --network ${params.GCP_CLUSTER_VPC} --allow tcp:${params.RESULT_PORT}"
            }
        }

        // stage('helm install kubeview') {
        //     steps {
        //         script {
        //             sh "helm repo add kubeview https://benc-uk.github.io/kubeview/charts ; helm repo update"
        //             namespace = 'kubeview'
        //             createNamespace (namespace)
        //             sh "helm install my-kubeview kubeview/kubeview --namespace ${namespace} --version 0.1.20"
        //         }
        //     }
        // }

    //     stage('helm install prometheus-grafana') {
    //         steps {
    //             script {
    //                 sh "helm repo add prometheus-community https://prometheus-community.github.io/helm-charts ; helm repo update"
    //                 namespace = 'prom'
    //                 createNamespace (namespace)
    //                 sh "helm install my-kube-prometheus-stack prometheus-community/kube-prometheus-stack --namespace ${namespace} --version 16.7.0"
    //             }
    //         }
    //     }

    //     stage('kubectl get nodes') {
    //         steps {
    //             script {
    //                 sh "kubectl get nodes -o wide"
    //                 sh "kubectl get --namespace default svc my-kubeview"
    //                 sh "kubectl get svc --namespace kubeview my-kubeview -o jsonpath='{.status.loadBalancer.ingress[0].ip}'"
    //                 sh "kubectl --namespace prom get pods -l release=my-kube-prometheus-stack"
    //             }
    //         }
    //    }

    }
}
