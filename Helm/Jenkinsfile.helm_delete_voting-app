library identifier: 'example-voting-app@master', retriever: modernSCM(
        [$class: 'GitSCMSource', remote: 'https://github.com/itay47/example-voting-app.git'])

pipeline {
    agent {
        label 'BUILD_AGENT'
    }

    environment {
        CLOUDSDK_CONFIG = "${env.WORKSPACE}"
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gCloud_ServiceAccount')
    }
  
    parameters {
              string(name: 'HELM_CHART', defaultValue: 'voting-app', description: 'The Helm chart name')
              string(name: 'HELM_DIR_NAME', defaultValue: 'Helm/my-vote', description: 'The Helm directory name')
              string(name: 'VALUES_FILE', defaultValue: 'dev-values.yaml', description: 'The Helm values file name')
              string(name: 'GKE_CLUSTER', defaultValue: 'devops-310517-gke', description: 'The GCP cluster name')
              string(name: 'GCP_PROJECT', defaultValue: 'devops-310517', description: 'The GCP project name')
              string(name: 'GCP_REGION', defaultValue: 'us-east1', description: 'The GCP region name')
              string(name: 'GCP_CLUSTER_VPC', defaultValue: 'final-project', description: 'The GCP VPC name')
              string(name: 'VOTE_PORT', defaultValue: '31000', description: 'The VOTE app port')
              string(name: 'RESULT_PORT', defaultValue: '31001', description: 'The RESULT app port')
    }

    stages {
        stage('gcloud config') {
            steps {
                sh "gcloud container clusters get-credentials ${params.GKE_CLUSTER} --region ${params.GCP_REGION} --project ${params.GCP_PROJECT}"
            }
        }

        stage('Helm delete vote') {

            input{
                message "You are about to delete ${params.HELM_CHART}\nAre you sure?"
            }

            steps {
               sh "helm delete ${params.HELM_CHART}"
            }
            
            post{
                success{
                    script{
                        Telegram.sendTextTelegram("Helm delete ${params.HELM_CHART} -- Success!")
                    }
                }
                failure{
                    script{
                        Telegram.sendTextTelegram("Helm delete ${params.HELM_CHART} -- Fail!")
                    }
                }
            }
        }

        stage('gcloud delete firewall-rules') {
            steps {
                sh "gcloud compute firewall-rules delete node-port-${params.VOTE_PORT}"
                sh "gcloud compute firewall-rules delete node-port-${params.RESULT_PORT}"
            }
        }

        // stage('helm delete kubeview') {
        //     steps {
        //         sh "helm delete my-kubeview"
        //         sh "kubectl delete namespace kubeview"
        //     }
        // }

        // stage('helm delete prometheus-grafana') {
        //     steps {
        //         sh "helm delete my-kube-prometheus-stack"
        //         sh "kubectl delete namespace prom"
        //     }
        // }

    }
}
