pipeline {
  agent any
  environment{
        BUILD_TAG = 'NO-TAG'
    }
  stages {
    
    stage ('Git Checkout') {
      steps {
              git "https://github.com/itay47/example-voting-app.git"
            }
      }

    stage('Build result') {
      input {
                message "Enter build number"
                ok "Start!"
                submitter "Mr. Jenkins"
                parameters {
                    string(name: 'BUILD_ID', defaultValue: 'latest', description: 'Build Number for tag: 0.x.y / string')
                }
            }

      steps{
                echo "====++++ building docker image 'result' ++++===="
                script{
                    BUILD_TAG = "${BUILD_ID}"
                    echo "${BUILD_TAG}"
                    //sh "docker build -t itay47/voting-app:result_$ ./result"
                    sh "docker build -t itay47/voting-app:result_$BUILD_TAG -t http://shechter47.mooo.com:8181/voting-app:result_$BUILD_TAG ./result"
                }
            }
            
            post{
                success{
                    echo "====++++ build success ++++===="

                    script{
                        sh 'docker images'
                    }
                }
                failure{
                    echo "====++++ build execution failed ++++===="
                }
            }
    } 

    stage('Build vote') {

            input {
                message "Enter build number"
                ok "Start!"
                submitter "Mr. Jenkins"
                parameters {
                    string(name: 'BUILD_ID', defaultValue: 'latest', description: 'Build Number for tag: 0.x.y / string')
                }
            }

      steps{
                echo "====++++ building docker image 'result' ++++===="
                script{
                    BUILD_TAG = "${BUILD_ID}"
                    echo "${BUILD_TAG}"
                    //sh "docker build -t itay47/voting-app:result_$ ./result"
                    sh "docker build -t itay47/voting-app:result_$BUILD_TAG -t http://shechter47.mooo.com:8181/voting-app:result_$BUILD_TAG ./result"
                }
            }
            
            post{
                success{
                    echo "====++++ build success ++++===="

                    script{
                        sh 'docker images'
                    }
                }
                failure{
                    echo "====++++ build execution failed ++++===="
                }
            }

      steps {
        sh 'docker build -t itay47/voting-app:vote_ ./vote'
      }
    }
    
    stage('Build worker') {

            input {
                message "Enter build number"
                ok "Start!"
                submitter "Mr. Jenkins"
                parameters {
                    string(name: 'BUILD_ID', defaultValue: 'latest', description: 'Build Number for tag: 0.x.y / string')
                }
            }

      steps{
                echo "====++++ building docker image 'result' ++++===="
                script{
                    BUILD_TAG = "${BUILD_ID}"
                    echo "${BUILD_TAG}"
                    //sh "docker build -t itay47/voting-app:result_$ ./result"
                    sh "docker build -t itay47/voting-app:result_$BUILD_TAG -t http://shechter47.mooo.com:8181/voting-app:result_$BUILD_TAG ./result"
                }
            }
            
            post{
                success{
                    echo "====++++ build success ++++===="

                    script{
                        sh 'docker images'
                    }
                }
                failure{
                    echo "====++++ build execution failed ++++===="
                }
            }

      // steps {
      //   sh 'docker build -t itay47/voting-app:worker_ ./worker'
      // }
    }
    
    stage('Push result image') {
      when {
        branch 'master'
      }
      steps {
        withDockerRegistry(credentialsId: 'dockerbuildbot-index.docker.io', url:'') {
          sh 'docker push dockersamples/result'
        }
      }
    }
    
    stage('Push vote image') {
      when {
        branch 'master'
      }
      steps {
        withDockerRegistry(credentialsId: 'dockerbuildbot-index.docker.io', url:'') {
          sh 'docker push dockersamples/vote'
        }
      }
    }
    stage('Push worker image') {
      when {
        branch 'master'
      }
      steps {
        withDockerRegistry(credentialsId: 'dockerbuildbot-index.docker.io', url:'') {
          sh 'docker push dockersamples/worker'
        }
      }
    }
  }

  stage("upload to nexus artifactory"){
            
            input {
                message "Upload to Nexus artifactory?"
            }
            
            steps{
                echo "====++++ uploading to nexus artifactory ++++===="
                
                script{
                    echo "login to nexus..."
                    //https://blog.sonatype.com/using-nexus-3-as-your-repository-part-3-docker-images

                    withCredentials([usernamePassword(credentialsId: 'cacd3c2b-63f8-4fb0-a0df-dc72b45b99c5', passwordVariable: 'NEXUS_CRED_PSW', usernameVariable: 'NEXUS_CRED_USR')]) {

                        sh 'docker login -u $NEXUS_CRED_USR -p $NEXUS_CRED_PSW http://cicdvm:8082/'
                    
                        try {
                            sh "docker push cicdvm:8082/my-image:$BUILD_TAG"
                        }
                        catch (exception) {
                            echo 'Exception: $exception'
                        }
                    }
                }
            }

            post{
                success{
                    echo "====++++ Upload to registry success ++++===="

                    script{
                        //logout the registry
                        sh "docker logout"
                        
                        //remove local images to cleanup storage 
                        sh "docker rmi my-image:$BUILD_TAG cicdvm:8082/my-image:$BUILD_TAG"
                    }
                }
                failure{
                    echo "====++++ Upload to registry failed ++++===="
                }
            }
        }
}