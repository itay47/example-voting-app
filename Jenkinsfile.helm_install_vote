

/*
    Create the kubernetes namespace
 */
def createNamespace (namespace) {
    echo "Creating namespace ${namespace} if needed"

    sh "[ ! -z \"\$(kubectl get ns ${namespace} -o name 2>/dev/null)\" ] || kubectl create ns ${namespace}"
}


pipeline {
    agent any
  
    parameters {
              string(name: 'HELM_CHART', defaultValue: 'voting-app', description: 'The Helm chart name')
              string(name: 'HELM_DIR_NAME', defaultValue: 'my-vote', description: 'The Helm directory name')
              string(name: 'VALUES_FILE', defaultValue: 'dev-values.yaml', description: 'The Helm values file name')
              string(name: 'GKE_CLUSTER', defaultValue: 'final-project-gke', description: 'The GCP cluster name')
              string(name: 'GCP_PROJECT', defaultValue: 'devops-310517', description: 'The GCP project name')
              string(name: 'GCP_REGION', defaultValue: 'us-east1', description: 'The GCP region name')
              string(name: 'GCP_CLUSTER_VPC', defaultValue: 'final-project', description: 'The GCP VPC name')
              string(name: 'VOTE_PORT', defaultValue: '31000', description: 'The VOTE app port')
              string(name: 'RESULT_PORT', defaultValue: '31001', description: 'The RESULT app port')
    }

    stages {
        stage('gcloud config') {
            steps {
                sh "gcloud container clusters get-credentials ${params.GKE_CLUSTER} --region ${params.GCP_REGION} --project ${params.GCP_PROJECT}"
            }
          }

        stage('Helm install vote') {
            steps {
                script {
                    sh "helm install ${params.HELM_CHART} -f ${params.VALUES_FILE} ${params.HELM_DIR_NAME}"
                }
            }
        }

        stage('gcloud create firewall-rules') {
            steps {
                sh "gcloud compute firewall-rules create node-port-${params.VOTE_PORT} --network ${params.GCP_CLUSTER_VPC} --allow tcp:${params.VOTE_PORT}"
                sh "gcloud compute firewall-rules create node-port-${params.RESULT_PORT} --network ${params.GCP_CLUSTER_VPC} --allow tcp:${params.RESULT_PORT}"
            }
        }

        stage('helm install kubeview') {
            steps {
                script {
                    sh "helm repo add kubeview https://benc-uk.github.io/kubeview/charts ; helm repo update"
                    namespace = 'kubeview'
                    createNamespace (namespace)
                    sh "helm install my-kubeview kubeview/kubeview --namespace ${namespace} --version 0.1.20"
                }
            }
        }

        stage('helm install prometheus-grafana') {
            steps {
                script {
                    sh "helm repo add prometheus-community https://prometheus-community.github.io/helm-charts ; helm repo update"
                    namespace = 'prom'
                    createNamespace (namespace)
                    sh "helm install my-kube-prometheus-stack prometheus-community/kube-prometheus-stack --namespace ${namespace} --version 16.7.0"
                }
            }
        }

        stage('kubectl get nodes') {
            steps {
                script {
                    sh "kubectl get nodes -o wide"
                    sh "kubectl get --namespace default svc my-kubeview"
                    sh "kubectl get svc --namespace kubeview my-kubeview -o jsonpath='{.status.loadBalancer.ingress[0].ip}'"
                    sh "kubectl --namespace prom get pods -l release=my-kube-prometheus-stack"
                }
            }
       }
    }
}
